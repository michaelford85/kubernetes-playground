---
- name: Bootstrap Kubernetes cluster via Kubeadm
  hosts: all
  gather_facts: no
  become: yes
  vars_files:
    - ./vars/default-vars.yml

  tasks:

    - name: Wait 600 seconds for SSH connectivity
      ansible.builtin.wait_for_connection:

    - name: Gather facts
      ansible.builtin.setup:

    - name: Include GCP k8s variables
      ansible.builtin.include_vars:
        file: ./vars/k8s_vars_gcp.yml
      when: cloud_provider == "gcp"

    - name: Include AWS k8s variables
      ansible.builtin.include_vars:
        file: ./vars/k8s_vars_aws.yml
      when: cloud_provider == "aws_ec2"

    - name: sudo apt-get update
      ansible.builtin.apt:
        update_cache: yes
      become: yes

    - name: Install pip3 on all nodes
      ansible.builtin.include_role:
        name: geerlingguy.pip

    - name: Install Docker on all nodes
      ansible.builtin.include_role:
        name: geerlingguy.docker

    - name: Install Kubernetes on all nodes
      ansible.builtin.include_role:
        name: geerlingguy.kubernetes

    - name: "Ensure /tmp/{{ cloud_prefix }}-config does not exist"
      ansible.builtin.file:
        path: "/tmp/{{ cloud_prefix }}-config"
        state: absent
      delegate_to: localhost
      run_once: yes

    - name: "Copy master node kubeconfig file to local /tmp/{{ cloud_prefix }}-config"
      ansible.builtin.fetch:
        src: /root/.kube/config
        dest: "/tmp/{{ cloud_prefix }}-config"
        flat: yes
      when: kubernetes_role == 'master'
      run_once: yes

    - ansible.builtin.debug:
        msg: "Be sure to change the server in /tmp/{{ cloud_prefix }}-config from {{ private_ip_address }} to {{ public_ip_address }}."
      when:
        - kubernetes_role == 'master'
        - cloud_provider == "aws_ec2"
      run_once: yes

    - ansible.builtin.debug:
        msg: "Be sure to change the server in /tmp/{{ cloud_prefix }}-config from {{ networkInterfaces[0].networkIP }} to {{ networkInterfaces[0].accessConfigs[0].natIP }}."
      when:
        - kubernetes_role == 'master'
        - cloud_provider == "gcp"
      run_once: yes
